# -*- coding: utf-8 -*-
"""tray-detector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dT1xZ6tYClq4se4kOTen_u5MSHVHQ2hu

usefull links:

https://medium.com/@quangnhatnguyenle/how-to-train-yolov3-on-google-colab-to-detect-custom-objects-e-g-gun-detection-d3a1ee43eda1
"""

import os
working_dir="/content"
os.chdir(working_dir)
!rm -rdf ./darknet
!rm -rdf ./data

#mode="train"
mode="test"

data_folder="trays_512_rgb"
#data_folder="trays"
#data_folder="trays_608_grey"
max_batches=6000
num_classes=1
num_anchors=9
num_validation_images_percent=0.05     #5% (small dataset) to 30% (large dataset)

prediction_fontsize=4
testweights="yolov3_custom_train_best.weights"
testweights_fallback="yolov3_custom_train_last.weights"

print("Connecting to GDrive")
print("Make sure your dataset on the GDrive is formatted like so:")
print("")
print("  GDrive\\training_data\\" + data_folder + ".zip")
print("   |- img_1.jpg")
print("   |- img_1.xml")
print("   |- img_2.jpg")
print("   |- img_2.xml")
print("   |- .....")
print("")

from google.colab import files
from google.colab import drive
drive.mount('/content/drive')

drivePath="/content/drive/MyDrive"

"""# Setup & Build YoloV3

## pull and patch
"""

#GPU count and name
!nvidia-smi -L
has_gpu=True
gpu_res=!nvidia-smi -L
if "failed" in gpu_res[0]:
	has_gpu=False
print("GPU Detected: " + str(has_gpu))

import os

!echo "Cloning darknet..."
#!git clone https://github.com/pjreddie/darknet # commit ID so far: bc5ea7cca8c770ebdacd2c792ddd96f6904ee23a
!git clone https://github.com/alexeyab/darknet # commit ID so far: 6af4370c3fe0f43a8c2fea6e04fc3dd2930b1da5

os.chdir(working_dir + "/darknet")

!echo "Setting up Make file..."
if has_gpu:
	!sed -i '/GPU[=]0/c\GPU=1' ./Makefile
	!sed -i '/CUDNN[=]0/c\CUDNN=1' ./Makefile
else:
	!sed -i '/GPU[=]1/c\GPU=0' ./Makefile
	!sed -i '/CUDNN[=]1/c\CUDNN=0' ./Makefile
!sed -i '/OPENCV[=]0/c\OPENCV=1' ./Makefile

!echo "Make settings set to:"
!cat ./Makefile | head -6

drive_pretrained_weights = drivePath + "/training_pretrained/darknet53.conv.74"
if (os.path.isfile(drive_pretrained_weights) == True):
	!echo "Copying pretrained model..."
	!cp "{drive_pretrained_weights}" ./
else:
	!echo "Downloading pretrained model..."
	!wget https://pjreddie.com/media/files/darknet53.conv.74
os.chdir(working_dir)

os.chdir(working_dir + "/darknet/cfg")
print("Updating yolov3 config...")
!rm -rdf ./yolov3_custom_train.cfg
!cp ./yolov3.cfg ./yolov3_custom_train.cfg

print("patching ./yolov3_custom_train.cfg...")

filters=((num_anchors/3)*(num_classes+5))
batch=64
subdivisions=16

!sed -i '/width[=]608/c\width=416' ./yolov3_custom_train.cfg
print("setting 'width' updated to: '416'")

!sed -i '/height[=]608/c\height=416' ./yolov3_custom_train.cfg
print("setting 'height' updated to: '416'")

!sed -i '/max_batches.*[=]/c\max_batches='$max_batches ./yolov3_custom_train.cfg
print("setting 'max_batches' updated to: '" + str(max_batches) + "'")

!sed -i '/steps.*[=]/c\steps='$(($max_batches*100/125))','$(($max_batches*100/111)) ./yolov3_custom_train.cfg
print("setting 'steps' updated to: '" + str((int)(max_batches*100/125)) + "," + str((int)(max_batches*100/111)) + "'")

!sed -i '/classes.*[=]/c\classes='$num_classes ./yolov3_custom_train.cfg
print("setting 'classes' updated to: '" + str(num_classes) + "'")

script_train_comment = ""
script_test_comment = ""
if mode == "train":
	script_test_comment = "#"
	script_train_comment = ""
if mode == "test":
	script_test_comment = ""
	script_train_comment = "#"

fix_batch_numbers_script = """ 
#!/bin/sh
commentedBatch=$(cat ./yolov3_custom_train.cfg | grep -n "batch=" | grep "#" | awk -F ':' '{print $1}')
commentedSubdivisions=$(cat ./yolov3_custom_train.cfg | grep -n "subdivisions=" | grep "#" | awk -F ':' '{print $1}')
uncommentedBatch=$(cat ./yolov3_custom_train.cfg | grep -n "batch=" | grep -v "#" | awk -F ':' '{print $1}')
uncommentedSubdivisions=$(cat ./yolov3_custom_train.cfg | grep -n "subdivisions=" | grep -v "#" | awk -F ':' '{print $1}')

sed -i ''${uncommentedBatch}'s/.*/""" + script_train_comment + """batch='""" + str(batch) + """'/' ./yolov3_custom_train.cfg
sed -i ''${uncommentedSubdivisions}'s/.*/""" + script_train_comment + """subdivisions='""" + str(subdivisions) + """'/' ./yolov3_custom_train.cfg
sed -i ''${commentedBatch}'s/.*/""" + script_test_comment + """batch=1/' ./yolov3_custom_train.cfg
sed -i ''${commentedSubdivisions}'s/.*/""" + script_test_comment + """subdivisions=1/' ./yolov3_custom_train.cfg
"""
f = open("fix_batch_numbers.sh", "w")
f.write(fix_batch_numbers_script)
f.close()
!chmod +x fix_batch_numbers.sh
!bash ./fix_batch_numbers.sh
!rm -rdf ./fix_batch_numbers.sh
print("setting 'batch' updated to: '" + str(batch) + "'")
print("setting 'subdivisions' updated to: '" + str(subdivisions) + "'")
if script_train_comment == "#":
	print("Commented out 'batch=" + str(batch) + "''")
	print("Commented out 'subdivisions=" + str(subdivisions) + "''")
	print("Uncommented 'batch=1''")
	print("Uncommented 'subdivisions=1''")
if script_test_comment == "#":
	print("Uncommented 'batch=" + str(batch) + "''")
	print("Uncommented 'subdivisions=" + str(subdivisions) + "''")
	print("Commented out 'batch=1''")
	print("Commented out 'subdivisions=1''")

update_filters_script = """ 
#!/bin/sh
previousFilterLineNumber=0
previousFilterLineValue=""
while read -r result
do
  lineNumber=$(echo ${result} | awk -F ':' '{print $1}')
  lineValue=$(echo ${result} | awk -F ':' '{print $2}')
  if [[ \"${lineValue}\" == \"filters=\"* ]]; then
    previousFilterLineNumber=${lineNumber}
    previousFilterLineValue=${lineValue}
  else
    if [[ ! \"${previousFilterLineNumber}\" == \"0\" ]]; then
      sed -i ''${previousFilterLineNumber}'s/.*/filters='""" + str(filters) + """'/' ./yolov3_custom_train.cfg
      echo "line '${previousFilterLineNumber}:${previousFilterLineValue}' updated to: 'filters=""" + str(filters) + """'"
    else
      echo "error: found no filter before the 'classes' line"
      exit
    fi
  fi
done <<< $(cat ./yolov3_custom_train.cfg | grep -n "classes\|filters")
"""

f = open("fix_filters.sh", "w")
f.write(update_filters_script)
f.close()
!chmod +x fix_filters.sh
!bash ./fix_filters.sh
!rm -rdf ./fix_filters.sh

# custom patcher
custom_patcher_filename = drivePath + "/training_data/" + data_folder + "/config_patcher_yolo.sh"
if (os.path.isfile(custom_patcher_filename) == True):
	print("launching custom patcher from 'GDrive/training_data/" + data_folder + "/config_patcher_yolo.sh'")
	!cp "{custom_patcher_filename}" "./config_patcher_yolo.sh"
	!chmod +x ./config_patcher_yolo.sh
	!bash ./config_patcher_yolo.sh
	!rm -rdf ./config_patcher_yolo.sh
	print("Custom patcher finished")
else:
	print("'" + custom_patcher_filename + "' not found. using current default values")

print("./yolov3_custom_train.cfg patched.")
os.chdir(working_dir)

if (os.path.isfile(working_dir + "/darknet/examples/detector.c") == True):
	os.chdir(working_dir + "/darknet/examples")
	print("Patching './detector.c' so it saves a weight every 1000 cycles...")
	!sed -i '/if.*i.*10000.*0.*i.*1000.*i.*100.*0/c\if(i%1000==0 || (i < 1000 && i%100 == 0)){' ./detector.c
	print("Patch done")
	os.chdir(working_dir)

if (os.path.isfile(working_dir + "/darknet/src/image_opencv.cpp") == True):
	os.chdir(working_dir + "/darknet/src")
	print("Patching './image_opencv.cpp' so it saves the 'chart.png' to the 'chart' subfolder...")
	!sed -i '/save_mat_png.img...chart.png..*/a save_mat_png(img, "chart/chart.png");' ./image_opencv.cpp
	print("Patch done")
	os.chdir(working_dir)

if (prediction_fontsize > 0):
	os.chdir(working_dir + "/darknet/src")
	print("Patching './image.c' with new fontsize for the prediction result image...")
	!sed -i '/image.label...get_label_v3.alphabet..labelstr...im.h..02.../c\image label = get_label_v3(alphabet, labelstr, {prediction_fontsize});' ./image.c
	print("Patch done")
	os.chdir(working_dir)

# Commented out IPython magic to ensure Python compatibility.
if (os.path.isdir("/drive/ngrok-ssh") == False):
	print("Installing 'ngrok', so we can route the mAP graph to a public ip so that we can track it")
	!mkdir -p /drive/ngrok-ssh
	#   %cd /drive/ngrok-ssh
	!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -O ngrok-stable-linux-amd64.zip
	!unzip -u ngrok-stable-linux-amd64.zip
	!cp /drive/ngrok-ssh/ngrok /ngrok
	!chmod +x /ngrok
os.chdir(working_dir)

"""## Build"""

print("Building darknet...")
os.chdir(working_dir + "/darknet")
!make
!chmod +x ./darknet
print("Done")

"""# Setup Input"""

import zipfile
import io
import os
from google.colab import files
from shutil import copyfile
import zipfile

os.chdir(working_dir)
#!rm -rdf ./data
!mkdir -p ./data
os.chdir(working_dir + "/data")
if (os.path.isdir(data_folder) == False):
	print("Connect with your GDrive")
	print("")
	print("Connecting with the google drive where your data is at.")
	print("Make sure this GDrive has a folder in its root called 'training_data'")
	print("and make sure that a zip file of the given data_folder (" + data_folder + "\data.zip) exists in that folder. The zip file should have the images and the VOC Labels together")
	print("")
	print("The content of the zip file should look like this this:")
	print("")
	print("  GDrive\\training_data\\" + data_folder + "\data.zip")
	print("   |- img_1.jpg")
	print("   |- img_1.xml")
	print("   |- img_2.jpg")
	print("   |- img_2.xml")
	print("   |- .....")
	print("")
	print("First, connect with your GDrive where the .zip is located")
	from google.colab import drive
	drive.mount('/content/drive')

	backup_folder = drivePath + "/trained_data/" + data_folder + "/backup"
	chart_folder = drivePath + "/trained_data/" + data_folder + "/chart"
	if (os.path.isdir(backup_folder) == False):
		print("folder '" + backup_folder + "' created")
		!mkdir -p "$backup_folder"

	if (os.path.isdir(chart_folder) == False):
		print("folder '" + chart_folder + "' created")
		!mkdir -p "$chart_folder"

	!rm -rdf /content/darknet/backup
	!ln -s "$backup_folder" /content/darknet

	if (os.path.isdir("/content/darknet/chart") == True):
		!rm -rdf /content/darknet/chart
	!ln -s "$chart_folder" /content/darknet

	!mkdir -p $data_folder
	os.chdir(data_folder)
	!mkdir -p "./raw"
	os.chdir("../")
	source_file = drivePath + "/training_data/" + data_folder + "/data.zip"
	destination_folder = "./" + data_folder + "/raw"
	destination_file = destination_folder + "/" + data_folder + ".zip"
	print("Copying '" + source_file + "' to '" + destination_folder + "'")
	copyfile(source_file, destination_file)

	print("Extracting .zip file...")
	with zipfile.ZipFile(destination_file, 'r') as zip_ref:
		zip_ref.extractall(destination_folder)

	os.remove(destination_file)

	print("Cleanup up 'darknet\data'...")
	os.chdir(working_dir)
	#  !rm -rdf ./darknet/data
	!mkdir -p ./darknet/data/images
	!mkdir -p ./darknet/data/labels
	os.chdir(working_dir + "/data")

	print("Copying to 'darknet\data'...")
	image_files = []
	for file in os.listdir(data_folder + "/raw"):
		if (file.endswith(".jpg") or file.endswith(".png")):
			copyfile(data_folder + "/raw/" + file, working_dir + "/darknet/data/images/" + file)
		if (file.endswith(".txt")):
			copyfile(data_folder + "/raw/" + file, working_dir + "/darknet/data/labels/" + file) # for yolov3 by 'pjreddie'
			copyfile(data_folder + "/raw/" + file, working_dir + "/darknet/data/images/" + file) # for yolov3 by 'AlexeyAB'

	print("Num files extracted:")
	!ls -F {destination_folder} | grep -v / | wc -l

	print("Done!")

os.chdir(working_dir)

import os
import random

print("Splitting data up into training and validation data...")
os.chdir(working_dir + "/darknet/data")
generate_train_and_eval_list = True # os.path.isfile("train.txt") == False
if (generate_train_and_eval_list):
	image_files = []
	for file in os.listdir("./images"):
		if (file.endswith(".jpg") or file.endswith(".png")):
			#      filename = os.path.splitext(file)[0]
			image_files.append(working_dir + "/darknet/data/images/" + file)

	training_files = []
	validation_files = []
	num_total_files = len(image_files)
	for i in range(num_total_files-1, -1, -1):
		is_validation_file=random.random() < num_validation_images_percent
		if is_validation_file:
			validation_files.append(i)
		else:
			training_files.append(i)

	training_lines = []
	validation_lines = []
	is_first = True
	for training_filename_index in training_files:
		line = image_files[training_filename_index] if is_first else ("\n" + image_files[training_filename_index])
		is_first = False
		training_lines.append(line)

	is_first = True
	for validation_filename_index in validation_files:
		line = image_files[validation_filename_index] if is_first else ("\n" + image_files[validation_filename_index])
		is_first = False
		validation_lines.append(line)

	print("num training images: " + str(len(training_files)))
	print("num validation images: " + str(len(validation_files)))
	print("validation/training ratio: " + str(len(validation_files) / (len(training_files))))

	f = open("train.txt", "w")
	f.writelines(training_lines)
	f.close()
	print("'train.txt' generated")

	f = open("val.txt", "w")
	f.writelines(validation_lines)
	f.close()
	print("'val.txt' generated")

print("Done!")

print("generating 'yolo.names'...")
os.chdir(working_dir)
label_format = ".txt" # TODO: Also support VOC xml. It should just contain the class names
classes = []

if (label_format == ".txt"):
	classes.append(data_folder)

f = open(working_dir + "/darknet/data/yolo.names", "w")
if len(classes) > 1:
	f.writelines(classes)
elif len(classes) == 1:
	f.writelines(["."])
f.close()
print("done!")

print("generating 'yolo.data'...")
os.chdir(working_dir)

yolo_data_lines = [
	("classes = " + str(num_classes)),
	("\ntrain = data/train.txt"),
	("\nvalid = data/val.txt"),
	("\nnames = data/yolo.names"),
	("\nbackup = backup"),
]

f = open(working_dir + "/darknet/data/yolo.data", "w")
f.writelines(yolo_data_lines)
f.close()
print("done!")

os.chdir(working_dir + "/darknet")
!sudo apt install dos2unix
!dos2unix ./data/train.txt
!dos2unix ./data/val.txt
!dos2unix ./data/yolo.data
!dos2unix ./data/yolo.names
!dos2unix ./cfg/yolov3_custom_train.cfg
os.chdir(working_dir)

"""# Train!

Start NGRok so we can see progress on a public server
"""

# Commented out IPython magic to ensure Python compatibility.
if (os.path.isdir("/drive/ngrok-ssh")):
	#   %cd /drive/ngrok-ssh
	print("Starting ngrok...")
	!./ngrok authtoken 1fV7fedpErNtnLgv2WYdFqTNOQK_7SJN4VuPFM25DRFfbMQ53
	get_ipython().system_raw('./ngrok http 8090 &')
	print("Follow this link to see the mAP graph")
	!curl -s http://localhost:4040/api/tunnels | python3 -c \
			"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])"
else:
	print("error: ngrok not installed")

os.chdir(working_dir)

"""Learn!"""

from IPython.utils import io

os.chdir(working_dir + "/darknet")

def get_latest_backupfile():
	backup_files = []
	for file in os.listdir("./backup"):
		if (file.endswith(".weights")):
			backup_files.append("backup/" + file)
	backup_files.sort(key = len)
	biggest_len = len(backup_files[-1]) if len(backup_files) > 0 else 0
	backup_files = list(filter(lambda x: len(x) == biggest_len, backup_files))
	backup_files.sort()
	backup_file = backup_files[-1] if len(backup_files) > 0 else ""
	return backup_file

def get_random_val_image():
	val_txt = open('./data/val.txt', 'r')
	val_lines = val_txt.readlines()
	count = 0
	for line in val_lines:
		count = count + 1
	random_image_index = random.randint(0, count-1)
	count = 0
	for line in val_lines:
		if count == random_image_index:
			return line
		count = count + 1
	return None

def run_train():
	latest_backup_file = get_latest_backupfile()
	if len(latest_backup_file) > 0:
		print("Continuing from latest checkpoint '" + latest_backup_file + "'")
		!./darknet detector train data/yolo.data cfg/yolov3_custom_train.cfg {latest_backup_file} -dont_show -mjpeg_port 8090 -map
	else:
		print("Starting fresh")
		!./darknet detector train data/yolo.data cfg/yolov3_custom_train.cfg darknet53.conv.74 -dont_show -mjpeg_port 8090 -map

def run_test(image_path = "", print_results = True):
	if (len(image_path) == 0):
		test_image_path = get_random_val_image()
	def detect(source_image, weights_path):
		!./darknet detector test data/yolo.data cfg/yolov3_custom_train.cfg {weights_path} -dont_show "{source_image}" -ext_output
	weights_filepath = "./backup/"+testweights
	if (os.path.isfile(weights_filepath) == False):
		weights_filepath = "./backup/"+testweights_fallback
	if (os.path.isfile(weights_filepath)):
		print("Evaluating on '" + test_image_path + "'...")
		if (print_results):
			detect(test_image_path, weights_filepath)
		else:
			with io.capture_output() as captured:
				detect(test_image_path, weights_filepath)
	else:
		print("file not found: '" + weights_filepath + "'")

if mode == "train":
	run_train();
elif mode == "test":
	run_test();

#  random_image = 
#  print("Starting fresh")
#  !./darknet detector test cfg/coco.data cfg/yolov4.cfg yolov4.weights -thresh 0.25

from IPython.display import Image
os.chdir(working_dir + "/darknet")

run_test("", False);

print("darknet/predictions.jpg:")
Image('predictions.jpg')